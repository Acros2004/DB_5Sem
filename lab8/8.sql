set serveroutput on;
alter session set NLS_LANGUAGE='AMERICAN';

-- 1. Разработайте простейший анонимный блок PL/SQL (АБ), не содержащий операторов. 
begin 
    null;
end;

-- 2. Разработайте АБ, выводящий «Hello World!». Выполните его в SQLDev и SQL+.
begin
        dbms_output.put_line('Hello, world');
end;
    
-- 3. Продемонстрируйте работу исключения и встроенных функций sqlerrm, sqlcode.
declare
        x number(3) := 3;
        y number(3) := 0;
        z number (10,2);
    begin
        z:=x/y;
        DBMS_OUTPUT.put_line(z);
        exception when others
           then dbms_output.put_line(sqlcode||': error = '||sqlerrm);
    end;
    
-- 4. Разработайте вложенный блок. Продемонстрируйте принцип обработки исключений во вложенных блоках.
declare
  -- Объявим переменные
  x number := 10;
  y number := 0;
begin
  -- Главный блок
  DBMS_OUTPUT.PUT_LINE('Начало главного блока');
  -- Вложенный блок
  Declare
    result number;
  begin
    DBMS_OUTPUT.PUT_LINE('Начало вложенного блока'); 
    -- Попытка выполнить деление
    result := x / y;   
    -- Этот код никогда не выполнится из-за исключения
    DBMS_OUTPUT.PUT_LINE('Этот код не будет выполнен');
  exception
    when ZERO_DIVIDE then
      DBMS_OUTPUT.PUT_LINE('Исключение: Попытка деления на ноль');
  end;
  -- Продолжение главного блока
  DBMS_OUTPUT.PUT_LINE('Продолжение главного блока');
exception
  when others then
    DBMS_OUTPUT.PUT_LINE('Исключение в главном блоке: ' || sqlerrm);
end;

-- 5. Выясните, какие типы предупреждения компилятора поддерживаются в данный момент.
SHOW PARAMETERS plsql_warnings; --by system in sql developer
SELECT name, value FROM v$parameter WHERE name = 'plsql_warnings'; --by system

-- 6. Разработайте скрипт, позволяющий просмотреть все спецсимволы PL/SQL.
select keyword from v$reserved_words
        where length = 1  order by keyword;
        
-- 7. Разработайте скрипт, позволяющий просмотреть все ключевые слова  PL/SQL.
select keyword from v$reserved_words
        where length > 1 order by keyword;
        
-- 8. Разработайте скрипт, позволяющий просмотреть все параметры Oracle Server, связанные с PL/SQL. Просмотрите эти же параметры с помощью SQL+-команды show.
select name,value from v$parameter
        where name like 'plsql%';
show parameter plsql;

--9. Разработайте анонимный блок, демонстрирующий (выводящий в выходной серверный поток результаты):
--10. объявление и инициализацию целых number-переменных;
-- 11. арифметические действия над двумя целыми number-переменных, включая деление с остатком;
-- 12. объявление и инициализацию number-переменных с фиксированной точкой;
-- 13. объявление и инициализацию number-переменных с фиксированной точкой и отрицательным масштабом (округление);
-- 14. объявление и инициализацию BINARY_FLOAT-переменной;
-- 15. объявление и инициализацию BINARY_DOUBLE-переменной;
-- 16. объявление number-переменных с точкой и применением символа E (степень 10) при инициализации/присвоении;
-- 17. объявление и инициализацию BOOLEAN-переменных. 


--9
declare
  v_name varchar2(50) := 'Каребо Никита';
  v_age number := 19;
begin
  DBMS_OUTPUT.PUT_LINE('Привет, '||  v_name );
  DBMS_OUTPUT.PUT_LINE('Через 5 лет вам будет '||  (v_age + 5));
  v_age := v_age + 10;
  DBMS_OUTPUT.PUT_LINE('Через еще 10 лет вам будет '||  v_age);
end;

declare
        t10 number(3):= 50;
        t11 number(3):=15;
        suma number(10,2);
        dwo number(10,2);
        t12 number(10,2):= 2.11;
        t13 number(10, -3):= 222999.45;
        t14 binary_float:= 123456789.123456789;
        t15 binary_double:= 123456789.123456789;
        t16 number(38,10):=12345E+10;
        t17 boolean:= true;
begin
    suma:=t10+t11;
    dwo:=mod(t10,t11);
    
         dbms_output.put_line('t10 = '||t10);
        dbms_output.put_line('t11 = '||t11);
        dbms_output.put_line('ostatok = '||dwo);
        dbms_output.put_line('suma = '||suma);
        dbms_output.put_line('fix = '||t12);
        dbms_output.put_line('okr = '||t13);
        dbms_output.put_line('binfl = '||t14);
        dbms_output.put_line('bindobuble = '||t15);
        dbms_output.put_line('E+10 = '||t16);
        if t17 then dbms_output.put_line('bool = '||'true'); end if;
        end;
        
-- 18. Разработайте анонимный блок PL/SQL содержащий объявление констант (VARCHAR2, CHAR, NUMBER). Продемонстрируйте  возможные операции константами.  
declare
    curr_year constant number := to_number (to_char (SYSDATE, 'YYYY'));
    vc constant varchar2(10) := 'Varchar2';
    c char(5) := 'Char';
    begin
        c := 'Nchar';
        DBMS_OUTPUT.PUT_LINE(curr_year); 
        DBMS_OUTPUT.PUT_LINE(vc); 
        DBMS_OUTPUT.PUT_LINE(c); 
    exception
      when others
      then DBMS_OUTPUT.PUT_LINE('error = ' || sqlerrm);
    end;
    
-- 19. Разработайте АБ, содержащий объявления с опцией %TYPE. Продемонстрируйте действие опции.
declare
pulp pulpit.pulpit%TYPE;
    begin 
        pulp := 'ПОИТ';
        DBMS_OUTPUT.PUT_LINE(pulp);
    end;

-- 20.	Разработайте АБ, содержащий объявления с опцией %ROWTYPE. Продемонстрируйте действие опции.
declare
    faculty_res faculty%ROWTYPE;
    begin 
        faculty_res.faculty := 'ФИТ';
        faculty_res.faculty_name := 'Факультет информационных технологий';
        DBMS_OUTPUT.PUT_LINE(faculty_res.faculty);
    end;

--Task 21 & 22
-- 21. Разработайте АБ, демонстрирующий все возможные конструкции оператора IF .
declare 
    x PLS_INTEGER := 16;
    begin
        if 5 > x then
        DBMS_OUTPUT.PUT_LINE('5 > '|| x);
        elsif 5 < x then
        DBMS_OUTPUT.PUT_LINE('5 < '|| x);
        else
        DBMS_OUTPUT.PUT_LINE('5 = '|| x);
        end if;
    end;

-- 23. Разработайте АБ, демонстрирующий работу оператора CASE.
declare
    x PLS_INTEGER := 21;
    begin
        case
        when x between 10 and 20 then
        DBMS_OUTPUT.PUT_LINE('10 <= ' || x || ' <= 20');
        when x between 21 and 40 then
        DBMS_OUTPUT.PUT_LINE('BETWEEN 21 AND 40');
        else
        DBMS_OUTPUT.PUT_LINE('ELSE');
        end case;
    end;

-- 24. Разработайте АБ, демонстрирующий работу оператора LOOP.
-- 25. Разработайте АБ, демонстрирующий работу оператора WHILE.
-- 26. Разработайте АБ, демонстрирующий работу оператора FOR.

declare 
    x PLS_INTEGER := 0;
    begin
        DBMS_OUTPUT.PUT_LINE('LOOP: ');
        loop
            x := x + 1;
            DBMS_OUTPUT.PUT_LINE(x);
            exit when x >= 3;
            end loop;

DBMS_OUTPUT.PUT_LINE('FOR: ');
    for k in 1..3
    loop
        DBMS_OUTPUT.PUT_LINE(k);
    end loop;

DBMS_OUTPUT.PUT_LINE('WHILE: ');
    while (x > 0)
        loop
            x := x - 1;
            DBMS_OUTPUT.PUT_LINE(x);
        end loop;
    end;

